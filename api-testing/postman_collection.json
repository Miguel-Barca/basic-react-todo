{
  "info": {
    "_postman_id": "30a76b9f-fae7-4796-8430-e3cfe4af4f78",
    "name": "Todo List API",
    "description": "Testing REST API endpoints - Login, Create, Update, Delete Todos",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "11159071"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login should return 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time should be less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response should have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success');",
                  "    pm.expect(responseJson).to.have.property('token');",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            },
            "description": "Authenticate user with username and password. Default credentials are test/test."
          },
          "response": []
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid login should return 401 Unauthorized', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response time should be less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Error response should have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message.toLowerCase()).to.include('invalid credentials');",
                  "});",
                  "",
                  "pm.test('No token should be provided for invalid credentials', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.not.have.property('token');",
                  "});",
                  "",
                  "pm.test('Auth token should not be modified', function () {",
                  "    console.log('❌ Login failed as expected - no token saved');",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"invalid\",\n    \"password\": \"invalid\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for user login"
    },
    {
      "name": "Todos",
      "item": [
        {
          "name": "Get All Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get todos should return 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response should be an array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Todos should have correct structure if present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.length > 0) {",
                  "        responseJson.forEach(todo => {",
                  "            pm.expect(todo).to.have.property('id');",
                  "            pm.expect(todo).to.have.property('text');",
                  "            pm.expect(todo.id).to.be.a('number');",
                  "            pm.expect(todo.text).to.be.a('string');",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "// Test content type",
                  "pm.test('Content-Type should be application/json', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/todos",
              "host": ["{{baseUrl}}"],
              "path": ["todos"]
            },
            "description": "Retrieve all todo items from the server"
          },
          "response": [
            {
              "name": "Success - Empty List",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/todos",
                  "host": ["{{baseUrl}}"],
                  "path": ["todos"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[]"
            },
            {
              "name": "Success - With Todos",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/todos",
                  "host": ["{{baseUrl}}"],
                  "path": ["todos"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n    {\n        \"id\": 1,\n        \"text\": \"Learn React\"\n    },\n    {\n        \"id\": 2,\n        \"text\": \"Build a todo app\"\n    }\n]"
            }
          ]
        },
        {
          "name": "Create Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Create todo should return 201 Created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response time should be less than 500ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test('Response should have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('text');",
                  "    pm.expect(responseJson.id).to.be.a('number');",
                  "    pm.expect(responseJson.text).to.be.a('string');",
                  "    pm.expect(responseJson.text).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test('Created todo text should match request', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(responseJson.text).to.equal(requestBody.text);",
                  "});",
                  "",
                  "// Save created todo ID for future tests",
                  "pm.test('Todo ID should be saved to collection variables', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.id) {",
                  "        pm.collectionVariables.set('lastCreatedTodoId', responseJson.id.toString());",
                  "        pm.collectionVariables.set('testTodoId', responseJson.id.toString());",
                  "        console.log('✅ Created todo with ID:', responseJson.id);",
                  "    }",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"{{sampleTodoText}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/todos",
              "host": ["{{baseUrl}}"],
              "path": ["todos"]
            },
            "description": "Create a new todo item. Requires 'text' field in the request body."
          },
          "response": [
            {
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"text\": \"Recicle bottles\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/todos",
                  "host": ["{{baseUrl}}"],
                  "path": ["todos"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"id\": 1,\n    \"text\": \"Learn React hooks\"\n}"
            }
          ]
        },
        {
          "name": "Update Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Update todo should return 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time should be less than 500ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test('Response should have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('text');",
                  "    pm.expect(responseJson.id).to.be.a('number');",
                  "    pm.expect(responseJson.text).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('Updated todo text should match request', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(responseJson.text).to.equal(requestBody.text);",
                  "});",
                  "",
                  "// Test todo ID remains the same",
                  "pm.test('Todo ID should remain unchanged', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todoId = pm.collectionVariables.get('testTodoId');",
                  "    if (todoId) {",
                  "        pm.expect(responseJson.id).to.equal(parseInt(todoId));",
                  "    }",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"{{updatedTodoText}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/todos/{{testTodoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["todos", "{{testTodoId}}"]
            },
            "description": "Update an existing todo item by ID. Requires 'text' field in the request body."
          },
          "response": [
            {
              "name": "Success",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"text\": \"Updated value\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/todos/1",
                  "host": ["{{baseUrl}}"],
                  "path": ["todos", "1"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"id\": 1,\n    \"text\": \"Updated value\"\n}"
            },
            {
              "name": "Todo Not Found",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"text\": \"Updated text\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/todos/999",
                  "host": ["{{baseUrl}}"],
                  "path": ["todos", "999"]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Delete todo should return 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time should be less than 500ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test('Response should confirm deletion', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('deleted');",
                  "    pm.expect(responseJson.deleted).to.be.true;",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/todos/{{testTodoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["todos", "{{testTodoId}}"]
            },
            "description": "Delete a todo item by ID"
          },
          "response": [
            {
              "name": "Success",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/todos/1",
                  "host": ["{{baseUrl}}"],
                  "path": ["todos", "1"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"deleted\": true\n}"
            }
          ]
        }
      ],
      "description": "CRUD operations for todo items"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "lastCreatedTodoId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testTodoId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "testUsername",
      "value": "test",
      "type": "string"
    },
    {
      "key": "testPassword",
      "value": "test",
      "type": "string"
    },
    {
      "key": "sampleTodoText",
      "value": "Recicle bottles",
      "type": "string"
    },
    {
      "key": "updatedTodoText",
      "value": "Updated todo item",
      "type": "string"
    }
  ]
}
